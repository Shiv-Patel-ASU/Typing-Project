{"version":3,"sources":["serviceWorker.ts","components/Node.tsx","components/typing.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","chars","times","temp","pause","escape","wpm","Node","state","allNodes","final","rawArray","currentLetter","index","wordsPerMin","timerIsOn","timerTime","timerStart","changeColor","Array","from","props","text","map","each","i","currentColor","letter","Col","className","md","key","gettingKeyPressed","e","which","$","prop","setState","clearInterval","keyCode","target","document","body","preventDefault","concat","length","status","Object","assign","Math","round","reset","start","console","log","nodetest","push","setInterval","addEventListener","this","removeEventListener","Container","Row","Button","variant","onClick","Component","Typing","currentWord","finalstr","fluid","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cae7ef06.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { Container, Col, Row, Button } from \"react-bootstrap\";\r\nimport \"../cssfiles/node.css\";\r\nimport \"tachyons\";\r\nimport $ from \"jquery\";\r\n\r\n//Global variables\r\nlet chars: string[];\r\nlet temp: singleNode[] = [];\r\nlet pause: number = 0;\r\nlet escape: boolean = false;\r\nlet wpm: number = 0;\r\nlet times: any;\r\n\r\nexport interface NodeProps {\r\n  currentWord: string;\r\n  finalstr: string;\r\n  text: string;\r\n}\r\n\r\nexport interface NodeState {\r\n  allNodes: singleNode[];\r\n  final: String;\r\n  rawArray: String[];\r\n  currentLetter: String;\r\n  index: number;\r\n  wordsPerMin: number;\r\n  timerIsOn: boolean;\r\n  timerTime: number;\r\n  timerStart: number;\r\n}\r\n\r\ninterface singleNode {\r\n  letter: String;\r\n  currentColor: number;\r\n}\r\n\r\nclass Node extends Component<NodeProps, NodeState> {\r\n  state: NodeState = {\r\n    allNodes: temp,\r\n    final: \"\",\r\n    rawArray: [],\r\n    currentLetter: \"\",\r\n    index: 0,\r\n    wordsPerMin: 0,\r\n    timerIsOn: false,\r\n    timerTime: 0,\r\n    timerStart: 0,\r\n  };\r\n\r\n  changeColor = () => {\r\n    chars = Array.from(this.props.text);\r\n    var cell = this.state.allNodes.map((each, i) => {\r\n      if (each.currentColor === 1) {\r\n        if (i === this.state.index) {\r\n          if (each.letter === \" \") {\r\n            return (\r\n              <Col className=\"Error1 bg-lightest-blue pa2\" md=\"auto\" key={i}>\r\n                {each.letter}\r\n              </Col>\r\n            );\r\n          } else {\r\n            return (\r\n              <Col className=\"Error1 bg-lightest-blue pa1\" md=\"auto\" key={i}>\r\n                {each.letter}\r\n              </Col>\r\n            );\r\n          }\r\n        } else {\r\n          if (each.letter === \" \") {\r\n            return (\r\n              <Col className=\"Error bg-lightest-blue pa2 bb\" md=\"auto\" key={i}>\r\n                {each.letter}\r\n              </Col>\r\n            );\r\n          } else {\r\n            return (\r\n              <Col className=\"Error bg-lightest-blue pa1 bb\" md=\"auto\" key={i}>\r\n                {each.letter}\r\n              </Col>\r\n            );\r\n          }\r\n        }\r\n      } else if (i === this.state.index) {\r\n        if (each.letter === \" \") {\r\n          return (\r\n            <Col className=\"Coll1 bg-lightest-blue pa2\" md=\"auto\" key={i}>\r\n              {each.letter}\r\n            </Col>\r\n          );\r\n        } else {\r\n          return (\r\n            <Col className=\"Coll1 bg-lightest-blue pa1\" md=\"auto\" key={i}>\r\n              {each.letter}\r\n            </Col>\r\n          );\r\n        }\r\n      } else {\r\n        if (each.letter === \" \") {\r\n          return (\r\n            <Col className=\"Coll bg-lightest-blue pa2 bb\" md=\"auto\" key={i}>\r\n              {each.letter}\r\n            </Col>\r\n          );\r\n        } else {\r\n          return (\r\n            <Col className=\"Coll bg-lightest-blue pa1 bb\" md=\"auto\" key={i}>\r\n              {each.letter}\r\n            </Col>\r\n          );\r\n        }\r\n      }\r\n    });\r\n    return cell;\r\n  };\r\n\r\n  gettingKeyPressed = (e: any) => {\r\n    if (e.which === 27) {\r\n      //If escape is hit, It will enable the start button again and set espace variable to true\r\n      $(\".startButton\").prop(\"disabled\", false);\r\n      this.setState({ timerIsOn: false });\r\n      clearInterval(times);\r\n      escape = true;\r\n    }\r\n    if (escape === false) {\r\n      if (e.keyCode === 32 && e.target === document.body) {\r\n        //Prevents page from scrolling down with spacebar\r\n        e.preventDefault();\r\n      }\r\n\r\n      const { index } = this.state;\r\n      this.setState({ currentLetter: e.key }); //setting the current typed key value\r\n      this.setState({ final: this.state.final.concat(e.key) });\r\n      if (this.state.index < this.state.allNodes.length) {\r\n        if (this.state.currentLetter === this.state.allNodes[index].letter) {\r\n          //If the current letter typed matches the proper index in the array, it will increment the index (cursor)\r\n          this.setState({ index: index + 1 });\r\n        } else {\r\n          let status: singleNode[] = Object.assign({}, this.state.allNodes); //If it does not match, it will set the currentColor to red, meaning the letter was typed in incorrectly.\r\n          status[index].currentColor = 1; //currentColor 0 means it was typed corrently and 1 means it was typed incorrectly\r\n          temp = status;\r\n        }\r\n\r\n        if (this.state.index >= 5) {\r\n          wpm = Math.round(index / 5 / (this.state.timerTime / 60));\r\n          this.setState({ wordsPerMin: wpm });\r\n        }\r\n      } else {\r\n        this.reset();\r\n      }\r\n    }\r\n  };\r\n\r\n  start = () => {\r\n    escape = false;\r\n    $(\".startButton\").prop(\"disabled\", true);\r\n    this.setState({ rawArray: chars });\r\n    console.log(this.state.allNodes);\r\n    if (pause === 0) {\r\n      chars.map((each, i) => {\r\n        const nodetest = {\r\n          letter: each,\r\n          currentColor: 0,\r\n        };\r\n        temp.push(nodetest);\r\n      });\r\n    }\r\n    pause = pause + 1;\r\n\r\n    this.setState({ timerIsOn: true });\r\n    times = setInterval(() => {\r\n      if (this.state.timerIsOn === true) {\r\n        this.setState({\r\n          timerTime: this.state.timerTime + 1,\r\n        });\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  reset = () => {\r\n    $(\".resetButton\").prop(\"disabled\", true);\r\n    temp = [];\r\n    this.setState({ index: 0 });\r\n    pause = 0;\r\n    this.setState({ allNodes: temp });\r\n    this.setState({ timerTime: 0 });\r\n    clearInterval(times);\r\n    this.setState({ wordsPerMin: 0 });\r\n    this.start();\r\n    $(\".resetButton\").prop(\"disabled\", false);\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.gettingKeyPressed);\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.gettingKeyPressed);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Row className=\"justify-content-md-center bg-lightest-blue\">\r\n          <Col className=\"text-center\">\r\n            <p>Timer: {this.state.timerTime}</p>\r\n          </Col>\r\n          <Col className=\"text-center\">\r\n            <p>Words per minute: {this.state.wordsPerMin}</p>\r\n          </Col>\r\n          <Col className=\"text-center\">\r\n            <p>Characters typed: {this.state.index}</p>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-md-center ba bg-lightest-blue\">\r\n          {this.changeColor()}\r\n        </Row>\r\n        <Row>\r\n          <br></br>\r\n        </Row>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col></Col>\r\n          <Col></Col>\r\n          <Col className=\"text-center\">\r\n            <Button\r\n              variant=\"outline-primary\"\r\n              className=\"startButton\"\r\n              onClick={this.start}\r\n            >\r\n              Start\r\n            </Button>\r\n          </Col>\r\n          <Col className=\"text-center\">\r\n            <h6>Press Escape key to pause</h6>\r\n          </Col>\r\n          <Col className=\"text-center\">\r\n            <Button\r\n              variant=\"outline-primary\"\r\n              className=\"resetButton\"\r\n              onClick={this.reset}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </Col>\r\n          <Col></Col>\r\n          <Col></Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport \"C:/Users/Shiv/Desktop/projects/typingapp/src/cssfiles/typing.css\";\r\nimport Node from \"./Node\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nclass Typing extends Component {\r\n  state = {\r\n    text:\r\n      \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. \",\r\n    currentWord: \"\",\r\n    finalstr: \"\",\r\n  };\r\n\r\n  render() {\r\n    const { currentWord, finalstr, text } = this.state;\r\n    return (\r\n      <div>\r\n        <Container fluid className=\"text-center bg-lightest-blue\">\r\n          <br></br>\r\n          <h4>Welcome to typing speed practice website!</h4>\r\n          <br className=\" bg-lightest-blue\"></br>\r\n        </Container>\r\n        <br></br>\r\n        <Node currentWord={currentWord} finalstr={finalstr} text={text} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Typing;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Typing from \"./components/typing\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Typing />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}