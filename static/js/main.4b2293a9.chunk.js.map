{"version":3,"sources":["serviceWorker.ts","components/Node.tsx","components/typing.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","chars","times","temp","pause","escape","start","wpm","mistakesTemp","countOfMistakes","Node","state","allNodes","rawArray","currentLetter","index","wordsPerMin","timerIsOn","accuracyScore","timerTime","totalCharTyped","changeColor","map","each","i","currentColor","letter","Col","className","md","key","gettingKeyPressed","e","which","$","prop","setState","clearInterval","keyCode","target","document","body","preventDefault","length","status","Object","assign","Math","round","AccScore","reset","filterErrors","filter","nodes","some","letterMistake","countMistake","tempNode","push","Row","returnErrors","Array","from","props","text","nodetest","setInterval","addEventListener","this","removeEventListener","Container","Button","variant","onClick","Component","Typing","fluid","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4b2293a9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { Container, Col, Row, Button } from \"react-bootstrap\";\r\nimport \"../cssfiles/node.css\";\r\nimport \"tachyons\";\r\nimport $ from \"jquery\";\r\nimport { totalmem } from \"os\";\r\n\r\n//Global variables\r\nlet chars: string[];\r\nlet temp: singleNode[] = [];\r\nlet pause: number = 0;\r\nlet escape: boolean = false;\r\nlet start: boolean = false;\r\nlet wpm: number = 0;\r\nlet times: any;\r\nlet mistakesTemp: singleNode[] = [];\r\nlet countOfMistakes: mistakeCount[] = [];\r\n\r\nexport interface NodeProps {\r\n  text: string;\r\n}\r\n\r\nexport interface NodeState {\r\n  allNodes: singleNode[];\r\n  rawArray: String[];\r\n  currentLetter: String;\r\n  index: number;\r\n  wordsPerMin: number;\r\n  timerIsOn: boolean;\r\n  timerTime: number;\r\n  accuracyScore: number;\r\n  totalCharTyped: number;\r\n}\r\n\r\ninterface singleNode {\r\n  letter: String;\r\n  currentColor: number;\r\n}\r\n\r\ninterface mistakeCount {\r\n  letterMistake: String;\r\n  countMistake: number;\r\n}\r\n\r\nclass Node extends Component<NodeProps, NodeState> {\r\n  state: NodeState = {\r\n    allNodes: temp,\r\n    rawArray: [],\r\n    currentLetter: \"\",\r\n    index: 0,\r\n    wordsPerMin: 0,\r\n    timerIsOn: false,\r\n    accuracyScore: 100,\r\n    timerTime: 0,\r\n    totalCharTyped: 0,\r\n  };\r\n\r\n  changeColor = () => {\r\n    var cell = this.state.allNodes.map((each, i) => {\r\n      if (each.currentColor === 1) {\r\n        if (i === this.state.index) {\r\n          if (each.letter === \" \") {\r\n            return (\r\n              <Col className=\"Error1 bg-black pa2 shadow-1\" md=\"auto\" key={i}>\r\n                {each.letter}\r\n              </Col>\r\n            );\r\n          } else {\r\n            return (\r\n              <Col className=\"Error1 bg-black pa1 shadow-1\" md=\"auto\" key={i}>\r\n                {each.letter}\r\n              </Col>\r\n            );\r\n          }\r\n        } else {\r\n          if (each.letter === \" \") {\r\n            return (\r\n              <Col className=\"Error pa2 bb\" md=\"auto\" key={i}>\r\n                {each.letter}\r\n              </Col>\r\n            );\r\n          } else {\r\n            return (\r\n              <Col className=\"Error pa1 bb\" md=\"auto\" key={i}>\r\n                {each.letter}\r\n              </Col>\r\n            );\r\n          }\r\n        }\r\n      } else if (i === this.state.index) {\r\n        if (each.letter === \" \") {\r\n          return (\r\n            <Col className=\"Coll1 bg-black pa2 shadow-1\" md=\"auto\" key={i}>\r\n              {each.letter}\r\n            </Col>\r\n          );\r\n        } else {\r\n          return (\r\n            <Col className=\"Coll1 bg-black pa1 shadow-1\" md=\"auto\" key={i}>\r\n              {each.letter}\r\n            </Col>\r\n          );\r\n        }\r\n      } else {\r\n        if (each.letter === \" \") {\r\n          return (\r\n            <Col className=\"Coll bg-lightest-blue pa2 bb\" md=\"auto\" key={i}>\r\n              {each.letter}\r\n            </Col>\r\n          );\r\n        } else {\r\n          return (\r\n            <Col className=\"Coll bg-lightest-blue pa1 bb\" md=\"auto\" key={i}>\r\n              {each.letter}\r\n            </Col>\r\n          );\r\n        }\r\n      }\r\n    });\r\n    return cell;\r\n  };\r\n\r\n  gettingKeyPressed = (e: any) => {\r\n    if (e.which === 27) {\r\n      //If escape is hit, It will enable the start button again and set espace variable to true\r\n      $(\".startButton\").prop(\"disabled\", false);\r\n      this.setState({ timerIsOn: false });\r\n      clearInterval(times);\r\n      escape = true;\r\n    }\r\n    if (escape === false && start === true) {\r\n      if (e.keyCode === 32 && e.target === document.body) {\r\n        //Prevents page from scrolling down with spacebar\r\n        e.preventDefault();\r\n      }\r\n      const { index } = this.state;\r\n      this.setState({ currentLetter: e.key }); //setting the current typed key value\r\n      if (this.state.index < this.state.allNodes.length) {\r\n        if (this.state.currentLetter !== \"Shift\") {\r\n          this.setState({ totalCharTyped: this.state.totalCharTyped + 1 });\r\n          if (\r\n            this.state.currentLetter ===\r\n            this.state.allNodes[this.state.index].letter\r\n          ) {\r\n            //If the current letter typed matches the proper index in the array, it will increment the index (cursor)\r\n            this.setState({ index: index + 1 });\r\n          } else {\r\n            let status: singleNode[] = Object.assign({}, this.state.allNodes); //If it does not match, it will set the currentColor to red, meaning the letter was typed in incorrectly.\r\n            status[this.state.index].currentColor = 1; //currentColor 0 means it was typed corrently and 1 means it was typed incorrectly\r\n            temp = status;\r\n          }\r\n        }\r\n\r\n        //Calculating the socres to display\r\n        if (index >= 5) {\r\n          wpm = Math.round(index / 5 / (this.state.timerTime / 60));\r\n          this.setState({ wordsPerMin: wpm });\r\n          let AccScore = Math.round(\r\n            ((this.state.index - mistakesTemp.length) /\r\n              this.state.totalCharTyped) *\r\n              100\r\n          );\r\n          this.setState({ accuracyScore: AccScore });\r\n        }\r\n      } else {\r\n        this.reset();\r\n      }\r\n    }\r\n  };\r\n\r\n  filterErrors = () => {\r\n    countOfMistakes = [];\r\n    let returnStatement;\r\n    mistakesTemp = this.state.allNodes.filter(\r\n      (nodes) => nodes.currentColor > 0\r\n    );\r\n    mistakesTemp.map((each) => {\r\n      if (countOfMistakes.some((i) => i.letterMistake === each.letter)) {\r\n        let i;\r\n        for (i = 0; i < countOfMistakes.length; i++) {\r\n          if (countOfMistakes[i].letterMistake === each.letter) {\r\n            countOfMistakes[i].countMistake =\r\n              countOfMistakes[i].countMistake + 1;\r\n          }\r\n        }\r\n      } else {\r\n        const tempNode = {\r\n          letterMistake: each.letter,\r\n          countMistake: 1,\r\n        };\r\n        countOfMistakes.push(tempNode);\r\n      }\r\n    });\r\n    if (mistakesTemp.length !== 0) {\r\n      returnStatement = (\r\n        <div>\r\n          <Row className=\"justify-content-md-center\">\r\n            <Col className=\"text-center bg-lightest-blue b bb\" md=\"3\">\r\n              Errors:\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"justify-content-md-center\">\r\n            <Col className=\"bg-lightest-blue\" md=\"3\">\r\n              <ul>{this.returnErrors()}</ul>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      );\r\n    } else {\r\n      returnStatement = <div></div>;\r\n    }\r\n    return returnStatement;\r\n  };\r\n\r\n  returnErrors = () => {\r\n    var tempReturn = countOfMistakes.map((nodes, key) => {\r\n      if (nodes.letterMistake === \" \") {\r\n        return (\r\n          <li key={key}>\r\n            {\"Space\"}: {nodes.countMistake}\r\n          </li>\r\n        );\r\n      } else if (nodes.letterMistake === \",\") {\r\n        return (\r\n          <li key={key}>\r\n            {\"Comma\"}: {nodes.countMistake}\r\n          </li>\r\n        );\r\n      } else if (nodes.letterMistake === \".\") {\r\n        return (\r\n          <li key={key}>\r\n            {\"Period\"}: {nodes.countMistake}\r\n          </li>\r\n        );\r\n      } else {\r\n        return (\r\n          <li key={key}>\r\n            {nodes.letterMistake}: {nodes.countMistake}\r\n          </li>\r\n        );\r\n      }\r\n    });\r\n    return tempReturn;\r\n  };\r\n\r\n  start = () => {\r\n    escape = false;\r\n    start = true;\r\n    $(\".startButton\").prop(\"disabled\", true);\r\n    chars = Array.from(this.props.text);\r\n    if (pause === 0) {\r\n      chars.map((each, i) => {\r\n        const nodetest = {\r\n          letter: each,\r\n          currentColor: 0,\r\n        };\r\n        temp.push(nodetest);\r\n      });\r\n    }\r\n    pause = pause + 1;\r\n\r\n    this.setState({ timerIsOn: true });\r\n    times = setInterval(() => {\r\n      if (this.state.timerIsOn === true) {\r\n        this.setState({\r\n          timerTime: this.state.timerTime + 1,\r\n        });\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  reset = () => {\r\n    $(\".resetButton\").prop(\"disabled\", true);\r\n    temp = [];\r\n    countOfMistakes = [];\r\n    this.setState({ index: 0 });\r\n    pause = 0;\r\n    this.setState({ allNodes: temp });\r\n    this.setState({ timerTime: 0 });\r\n    clearInterval(times);\r\n    this.setState({ wordsPerMin: 0 });\r\n    this.start();\r\n    $(\".resetButton\").prop(\"disabled\", false);\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.gettingKeyPressed);\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.gettingKeyPressed);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Row className=\"bg-lightest-blue topContainer\">\r\n          <Col className=\"text-center\">\r\n            <p>Timer: {this.state.timerTime}</p>\r\n          </Col>\r\n          <Col className=\"text-center\">\r\n            <p>Words per minute: {this.state.wordsPerMin}</p>\r\n          </Col>\r\n          <Col className=\"text-center\">\r\n            <p>Accuracy Score: {this.state.accuracyScore}%</p>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-md-center bg-lightest-blue bottomContainer\">\r\n          {this.changeColor()}\r\n        </Row>\r\n        <Row>\r\n          <br></br>\r\n        </Row>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col></Col>\r\n          <Col></Col>\r\n          <Col className=\"text-center\">\r\n            <Button\r\n              variant=\"warning\"\r\n              className=\"startButton\"\r\n              onClick={this.start}\r\n            >\r\n              Start\r\n            </Button>\r\n          </Col>\r\n          <Col className=\"text-center\">\r\n            <h6 className=\"yellow\">Press Escape key to pause</h6>\r\n          </Col>\r\n          <Col className=\"text-center\">\r\n            <Button\r\n              variant=\"warning\"\r\n              className=\"resetButton\"\r\n              onClick={this.reset}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </Col>\r\n          <Col></Col>\r\n          <Col></Col>\r\n        </Row>\r\n        <Row>\r\n          <br></br>\r\n        </Row>\r\n        <Container className=\"justify-content-md-center\">\r\n          {this.filterErrors()}\r\n        </Container>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport \"C:/Users/Shiv/Desktop/projects/typingapp/src/cssfiles/typing.css\";\r\nimport Node from \"./Node\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nclass Typing extends Component {\r\n  state = {\r\n    text:\r\n      \"Lorem Ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. \",\r\n  };\r\n\r\n  render() {\r\n    const { text } = this.state;\r\n    return (\r\n      <Container className=\"hero-image\" fluid>\r\n        <Container className=\"text-center bg-lightest-blue topContainer\" fluid>\r\n          <br></br>\r\n          <h4>Welcome to typing speed practice website!</h4>\r\n          <br className=\" bg-lightest-blue\"></br>\r\n        </Container>\r\n        <br></br>\r\n        <Node text={text} />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Typing;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Typing from \"./components/typing\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Typing />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}